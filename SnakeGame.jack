class SnakeGame {

  field Snake snake;



  constructor SnakeGame new() {

    let snake = Snake.new(256, 128);

	do Output.moveCursor(1, 13);

	do Output.printString("Bienvenido a Snake");

	do Output.moveCursor(3, 10);

	do Output.printString("Presione espacio para crecer y Q para salir del juego");

	do Sys.wait(3000);

    return this;

  }



  method void dispose(){

    do snake.dispose();

    do Memory.deAlloc(this);



    return;

  }



  method void run(){

    var char key;

    var boolean exit, grow;

    var int direction; // 0=ninguno, 1=arriba, 2=abajo, 3=izquierda, 4=derecha



    let direction = 0;



    while (~exit) {

      while (key = 0) {

          let key = Keyboard.keyPressed();

          do moveSnake(direction, grow);

          do drawScreen();

      }



      if (key = 81) {

          let exit = true;

      }

      if (key = 32) {

          let grow = true;

      }

      if (key = 131) {

          let direction = 1;

      }

      if (key = 133) {

          let direction = 2;

      }

      if (key = 130) {

          let direction = 3;

      }

      if (key = 132) {

          let direction = 4;

      }


      while (~(key = 0)) {

          let key = Keyboard.keyPressed();

          do moveSnake(direction, grow);

          do drawScreen();

          let grow = false;

      }

    }

    return;

  }



  method void moveSnake(int direction, bool grow) {

      if (direction = 1) {

          do snake.crawlUp(grow);

      }

      if (direction = 2) {

          do snake.crawlDown(grow);

      }

      if (direction = 3) {

          do snake.crawlLeft(grow);

      }

      if (direction = 4) {

          do snake.crawlRight(grow);

      }



      do Sys.wait(5);

      return;

  }



  method void drawScreen(){

    var PixelNode pix;



    do Screen.clearScreen();

    let pix = snake.first();



    while( ~(pix = null) ){

      do Screen.drawPixel(pix.x(), pix.y());

      let pix = pix.next();

    }

    return;

  }

}